<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2015-2023 "Neo Technology,"
    Network Engine for Objects in Lund AB [http://neotechnology.com]

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Attribution Notice under the terms of the Apache License 2.0

    This work was created by the collective efforts of the openCypher community.
    Without limiting the terms of Section 6, any Derivative Work that is not
    approved by the public consensus process of the openCypher Implementers Group
    should not be described as “Cypher” (and Cypher® is a registered trademark of
    Neo4j Inc.) or as "openCypher". Extensions by implementers or prototypes or
    proposals for change that have been documented or implemented should only be
    described as "implementation extensions to Cypher" or as "proposed changes to
    Cypher that are not yet approved by the openCypher community".

-->
<!DOCTYPE grammar [
  <!ENTITY WS "<opt><non-terminal ref='SP'/></opt>">
  <!ENTITY SP "<non-terminal ref='SP'/>">
  <!ENTITY var "<non-terminal ref='Variable'/>">
]>
<grammar language="Cypher Start Clause"
  xmlns="http://opencypher.org/grammar"
  xmlns:rr="http://opencypher.org/railroad"
  xmlns:oc="http://opencypher.org/opencypher"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://opencypher.org/grammar xmlschemas/ocGrammar.xsd "
  >

  <!-- / START \ -->

  <production name="Start" oc:legacy="true">
    START &SP;
    <non-terminal ref="StartPoint"/>
    <repeat>&WS;,&WS;<non-terminal ref="StartPoint"/></repeat>
    <opt><non-terminal ref="Where"/></opt>
  </production>

  <production name="StartPoint" rr:inline="true" oc:legacy="true">
    &var; &WS; = &WS; <non-terminal ref="Lookup"/>
  </production>

  <production name="Lookup" rr:inline="true" oc:legacy="true">
    <alt>
      <non-terminal ref="NodeLookup"/>
      <non-terminal ref="RelationshipLookup"/>
    </alt>
  </production>

  <production name="NodeLookup" rr:inline="true" oc:legacy="true">
    NODE &WS;
    <alt>
      <non-terminal ref="IdentifiedIndexLookup"/>
      <non-terminal ref="IndexQuery"/>
      <non-terminal ref="IdLookup"/>
    </alt>
  </production>

  <production name="RelationshipLookup" rr:inline="true" oc:legacy="true">
    <alt>RELATIONSHIP REL</alt>
    <alt>
      <non-terminal ref="IdentifiedIndexLookup"/>
      <non-terminal ref="IndexQuery"/>
      <non-terminal ref="IdLookup"/>
    </alt>
  </production>

  <production name="IdentifiedIndexLookup" oc:legacy="true">
    : <non-terminal ref="SymbolicName" rr:title="index name"/>
    ( <non-terminal ref="SymbolicName" rr:title="property key"/> =
    <alt>
      <non-terminal ref="StringLiteral"/>
      <non-terminal ref="LegacyParameter"/>
    </alt>)
  </production>

  <production name="IndexQuery" oc:legacy="true">
    : <non-terminal ref="SymbolicName" rr:title="index name"/>
    (<alt>
      <non-terminal ref="StringLiteral"/>
      <non-terminal ref="LegacyParameter"/>
    </alt>)
  </production>

  <production name="IdLookup" oc:legacy="true">
    (<alt>
      <non-terminal ref="LiteralIds"/>
      <non-terminal ref="LegacyParameter"/>
      *
    </alt>)
  </production>

  <production name="LiteralIds" rr:inline="true" oc:legacy="true">
    <non-terminal ref="IntegerLiteral"/>
    <repeat>
      &WS;,&WS;<non-terminal ref="IntegerLiteral"/>
    </repeat>
  </production>

  <!-- \ START / -->

  <vocabulary file="basic-grammar.xml"/>

</grammar>
