CREATE ()§
CREATE( )§
CYPHER 3.0 MATCH (n) RETURN n§
CREATE (n:Person { name : 'Andres', title : 'Developer' })§
MATCH (node1:Label1)

WHERE node1.propertyA = {value}

RETURN node2.propertyA, node2.propertyB§
MATCH (tom:Person)-[:ACTED_IN]->(tomHanksMovies) RETURN tom§
MATCH (tom:Person)  -[:ACTED_IN]->(tomHanksMovies) RETURN tom§
MATCH (tom:Person  )-[:ACTED_IN]->(tomHanksMovies) RETURN tom§
match(n)return n        §
WITH range(2011, 2014) AS years, range(1,12) as months
FOREACH(year IN years |
  MERGE (y:Year {year: year})
  FOREACH(month IN months |
    CREATE (m:Month {month: month})
    MERGE (y)-[:HAS_MONTH]->(m)
    FOREACH(day IN (CASE
                      WHEN month IN [1,3,5,7,8,10,12] THEN range(1,31)
                      WHEN month = 2 THEN
                        CASE
                          WHEN year % 4 <> 0 THEN range(1,28)
                          WHEN year % 100 <> 0 THEN range(1,29)
                          WHEN year % 400 <> 0 THEN range(1,29)
                          ELSE range(1,28)
                        END
                      ELSE range(1,30)
                    END) |
      CREATE (dd:Day {day: day})
      MERGE (m)-[:HAS_DAY]->(dd))))

WITH *

MATCH (year:Year)-[:HAS_MONTH]->(month)-[:HAS_DAY]->(day)
WITH year,month,day
ORDER BY year.year, month.month, day.day
WITH collect(day) as days
FOREACH(i in RANGE(0, length(days) - 2) |
    FOREACH(day1 in [days[i]] |
        FOREACH(day2 in [days[i + 1]] |
            CREATE UNIQUE (day1)-[:NEXT]->(day2))))§
CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE§
CREATE CONSTRAINT ON (n:Person)ASSERT n.name IS UNIQUE§
CREATE CONSTRAINT ON(n:Person)ASSERT n.name IS UNIQUE§
CREATE CONSTRAINT ON (p:Person) ASSERT EXISTS(p.name)§
CREATE CONSTRAINT ON ()-[l:LIKED]-() ASSERT EXISTS(l.why)§
CREATE CONSTRAINT ON ()-[l:LIKED]-() ASSERT EXISTS (l.why)§
CREATE CONSTRAINT ON()-[l:LIKED]-() ASSERT EXISTS (l.why)§
CREATE CONSTRAINT ON()-[l:LIKED]-()ASSERT EXISTS (l.why)§
WITH {eyes: 'blue'} AS n
RETURN CASE n.eyes
 WHEN 'blue' THEN 1
 WHEN 'brown' THEN 2
 ELSE 3
END§
WITH {eyes: 'blue'} AS n
RETURN CASE (n.eyes)
 WHEN 'blue' THEN 1
 WHEN 'brown' THEN 2
 ELSE 3
END§
WITH {eyes: 'blue'} AS n
RETURN CASE(n.eyes)
 WHEN 'blue' THEN 1
 WHEN 'brown' THEN 2
 ELSE 3
END§
WITH {eyes: 'blue'} AS n
RETURN CASE n.eyes
 WHEN   'blue'   THEN   1
 WHEN   'brown'   THEN   2
 ELSE 3
END§
CYPHER 2.3 START n = node(6, 7, 8) RETURN n§
CYPHER 2.3 START n =  node(6,  7,8)   RETURN n§
CYPHER 2.3 START n = node  (6, 7, 8) RETURN n§
USING PERIODIC COMMIT 500
LOAD CSV FROM 'http://neo4j.com/docs/3.1.0/csv/artists.csv' AS line
CREATE (:Artist { name: line[1], year: toInt(line[2])})§
RETURN "flags" =~ "regex"§
